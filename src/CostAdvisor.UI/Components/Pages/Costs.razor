@page "/costs"
@using CostAdvisor.Shared.Models
@using CostAdvisor.UI.Services
@rendermode InteractiveServer
@inject ICostAdvisorService CostService
@implements IDisposable

<PageTitle>Costs</PageTitle>

<div class="page-card">
    <!-- Header -->
    <div class="flex items-center justify-between mb-6 w-full">
        <h3 class="text-xl font-semibold text-gray-800">Resource Costs</h3>
        <button class="btn-primary" @onclick="SafeFetchData">
            <i class="fas fa-sync-alt mr-2"></i> Fetch Latest
        </button>
    </div>

    <!-- Filters -->
    <div class="filters mb-6 flex flex-wrap gap-4">
        <input placeholder="Filter by provider..." value="@providerInput" @oninput="OnProviderInput" class="filter-input" />
        <input placeholder="Filter by service..." value="@serviceInput" @oninput="OnServiceInput" class="filter-input" />
        <input placeholder="Filter by region..." value="@regionInput" @oninput="OnRegionInput" class="filter-input" />
    </div>

    <!-- Table -->
    <div class="overflow-x-auto">
        <table class="styled-table">
            <thead>
                <tr>
                    <th>Provider</th>
                    <th>Region</th>
                    <th>Service</th>
                    <th>Usage</th>
                    <th>Cost</th>
                    <th>Status</th>
                    <th>Date</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var cost in filteredCosts)
                {
                    var costId = cost.Id; // Capture for closure
                                          <tr @key="cost.Id" @onclick="@(() => ToggleExpandRow(costId))">
                                              <td>@cost.Account?.AccountIdentifier</td>
                                              <td>@cost.Region</td>
                                              <td>@cost.Service</td>
                                              <td>@cost.UsageAmount</td>
                                              <td>@cost.UsageAmount.ToString("C")</td>
                                              <td>
                            @if (cost.UsageAmount > 1000)
                            {
                                <span class="badge badge-high">High ↑</span>
                            }
                            else if (cost.UsageAmount >= 100)
                            {
                                <span class="badge badge-medium">Medium →</span>
                            }
                            else
                            {
                                <span class="badge badge-low">Low ↓</span>
                            }
                        </td>
                        <td>@cost.Date.ToShortDateString()</td>
                    </tr>

                    @if (expandedId == cost.Id && cost.Tags != null)
                    {
                        <tr class="expanded-row" @key="@($"expanded-{cost.Id}")">
                            <td colspan="7">
                                <strong>Tags:</strong>
                                <ul class="list-disc ml-6 mt-1 text-sm text-gray-600">
                                    @foreach (var tag in cost.Tags)
                                    {
                                        <li>@tag.Key: @tag.Value</li>
                                    }
                                </ul>
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>
</div>

@code {
    private List<NormalizedCost> costs = new();
    private List<NormalizedCost> filteredCosts = new();
    private int expandedId = -1;

    // Inputs for typing
    private string providerInput = "";
    private string serviceInput = "";
    private string regionInput = "";

    // Actual filter values used in ApplyFilters
    private string ProviderFilter = "";
    private string ServiceFilter = "";
    private string RegionFilter = "";

    private Timer? _debounceTimer;
    private readonly object _timerLock = new object();

    protected override async Task OnInitializedAsync()
    {
        await LoadCostsAsync();
    }

    private async Task LoadCostsAsync()
    {
        var from = DateTime.UtcNow.AddDays(-30);
        var to = DateTime.UtcNow;
        costs = await CostService.GetResourceCostsAsync(from, to);
        ApplyFilters();
    }

    private void ToggleExpandRow(int id)
    {
        expandedId = expandedId == id ? -1 : id;
        StateHasChanged();
    }

    private async Task SafeFetchData()
    {
        await CostService.FetchCostsAsync();
        await LoadCostsAsync();
    }

    private void ApplyFilters()
    {
        filteredCosts = costs
            .Where(c =>
                (string.IsNullOrEmpty(ProviderFilter) || c.Account?.AccountIdentifier?.Contains(ProviderFilter, StringComparison.OrdinalIgnoreCase) == true) &&
                (string.IsNullOrEmpty(ServiceFilter) || c.Service.Contains(ServiceFilter, StringComparison.OrdinalIgnoreCase)) &&
                (string.IsNullOrEmpty(RegionFilter) || c.Region.Contains(RegionFilter, StringComparison.OrdinalIgnoreCase))
            ).ToList();

        // Force re-render after filtering
        InvokeAsync(StateHasChanged);
    }

    // Input handlers with debounce
    private void OnProviderInput(ChangeEventArgs e)
    {
        providerInput = e.Value?.ToString() ?? "";
        DebounceFilter();
    }

    private void OnServiceInput(ChangeEventArgs e)
    {
        serviceInput = e.Value?.ToString() ?? "";
        DebounceFilter();
    }

    private void OnRegionInput(ChangeEventArgs e)
    {
        regionInput = e.Value?.ToString() ?? "";
        DebounceFilter();
    }

    private void DebounceFilter()
    {
        lock (_timerLock)
        {
            _debounceTimer?.Dispose();
            _debounceTimer = new Timer(async _ =>
            {
                await InvokeAsync(() =>
                {
                    ProviderFilter = providerInput;
                    ServiceFilter = serviceInput;
                    RegionFilter = regionInput;
                    ApplyFilters();
                });
            }, null, 300, Timeout.Infinite); // Slightly longer delay
        }
    }

    public void Dispose()
    {
        lock (_timerLock)
        {
            _debounceTimer?.Dispose();
        }
    }

}