@page "/costs"
@using CostAdvisor.Shared.Models
@inject HttpClient Http

<PageTitle>Costs</PageTitle>

<div class="mb-4 flex gap-4">
    <input placeholder="Filter by provider..." class="input" @bind="providerFilter" />
    <input placeholder="Filter by service..." class="input" @bind="serviceFilter" />
    <input placeholder="Filter by region..." class="input" @bind="regionFilter" />
</div>

<table class="table-auto w-full">
    <thead>
        <tr>
            <th>Provider</th>
            <th>Region</th>
            <th>Service</th>
            <th>Usage</th>
            <th>Cost</th>
            <th>Date</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var cost in filteredCosts)
        {
            <tr @onclick="() => ToggleExpand(cost.Id)" class="cursor-pointer hover:bg-gray-100">
                <td>@cost.Account</td>
                <td>@cost.Region</td>
                <td>@cost.Service</td>
                <td>@cost.UsageAmount</td>
                <td>@cost.UsageAmount.ToString("C")</td>
                <td>@cost.Date.ToShortDateString()</td>
            </tr>
            @if (expandedId == cost.Id && cost.Tags != null)
            {
                <tr>
                    <td colspan="6">
                        <strong>Tags:</strong>
                        <ul>
                            @foreach (var tag in cost.Tags)
                            {
                                <li>@tag.Key: @tag.Value</li>
                            }
                        </ul>
                    </td>
                </tr>
            }
        }
    </tbody>
</table>

@code {
    List<NormalizedCost> costs = new();
    List<NormalizedCost> filteredCosts = new();

    string providerFilter = "";
    string serviceFilter = "";
    string regionFilter = "";
    int expandedId = -1;

    protected override async Task OnInitializedAsync()
    {
        costs = await Http.GetFromJsonAsync<List<NormalizedCost>>("api/billing/costs");
        filteredCosts = costs;
    }

    void ToggleExpand(int id)
    {
        expandedId = expandedId == id ? -1 : id;
    }

    void OnFilterChanged()
    {
        filteredCosts = costs.Where(c =>
            (string.IsNullOrEmpty(providerFilter) || c.Account.AccountIdentifier.Contains(providerFilter, StringComparison.OrdinalIgnoreCase)) &&
            (string.IsNullOrEmpty(serviceFilter) || c.Service.Contains(serviceFilter, StringComparison.OrdinalIgnoreCase)) &&
            (string.IsNullOrEmpty(regionFilter) || c.Region.Contains(regionFilter, StringComparison.OrdinalIgnoreCase))
        ).ToList();
    }
}
