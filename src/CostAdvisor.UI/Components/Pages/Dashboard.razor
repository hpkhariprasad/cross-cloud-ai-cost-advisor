@page "/dashboard"
@using CostAdvisor.Shared.Models
@using CostAdvisor.UI.Services
@inject ICostAdvisorService CostService

<PageTitle>Dashboard</PageTitle>

<div class="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-4 gap-6 mb-8">
    <Card class="rounded-lg shadow bg-white p-6 flex flex-col items-center justify-center">
        <CardContent>
            <h2 class="text-lg font-bold text-gray-700 mb-2 text-center">Total Cost</h2>
            <p class="text-3xl font-semibold text-blue-700">@dashboard?.TotalCost.ToString("C")</p>
        </CardContent>
    </Card>
    <Card class="rounded-lg shadow bg-white p-6 flex flex-col items-center justify-center">
        <CardContent>
            <h2 class="text-lg font-bold text-gray-700 mb-2 text-center">Resources</h2>
            <p class="text-3xl font-semibold text-blue-700">@dashboard?.ResourceCount</p>
        </CardContent>
    </Card>
    <Card class="rounded-lg shadow bg-white p-6 flex flex-col items-center justify-center">
        <CardContent>
            <h2 class="text-lg font-bold text-gray-700 mb-2 text-center">Top Provider</h2>
            <p class="text-2xl font-semibold text-green-700">@dashboard?.TopProvider</p>
        </CardContent>
    </Card>
    <Card class="rounded-lg shadow bg-white p-6 flex flex-col items-center justify-center">
        <CardContent>
            <h2 class="text-lg font-bold text-gray-700 mb-2 text-center">Top Service</h2>
            <p class="text-2xl font-semibold text-purple-700">@dashboard?.TopService</p>
        </CardContent>
    </Card>
</div>

<div class="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8">
    <!-- Provider Breakdown -->
    <Card class="rounded-lg shadow bg-white p-6">
        <CardContent>
            <h2 class="font-bold mb-4 text-gray-700 text-xl">Provider Breakdown</h2>
            <div class="flex justify-center items-center">
                <ResponsiveContainer width="100%" height="300">
                    <PieChart>
                        <Pie Data="@providerData" DataKey="value" NameKey="name" OuterRadius="100" Fill="#8884d8" Label />
                        <Tooltip />
                    </PieChart>
                </ResponsiveContainer>
            </div>
        </CardContent>
    </Card>

    <!-- Monthly Trend -->
    <Card class="rounded-lg shadow bg-white p-6">
        <CardContent>
            <h2 class="font-bold mb-4 text-gray-700 text-xl">Monthly Trend</h2>
            <div class="flex justify-center items-center">
                <ResponsiveContainer width="100%" height="300">
                    <LineChart Data="@trendData">
                        <XAxis DataKey="month" />
                        <YAxis />
                        <Tooltip />
                        <Line Type="monotone" DataKey="value" Stroke="#82ca9d" />
                    </LineChart>
                </ResponsiveContainer>
            </div>
        </CardContent>
    </Card>
</div>

<!-- Top Services -->
<Card class="mt-6 rounded-lg shadow bg-white p-6">
    <CardContent>
        <h2 class="font-bold mb-4 text-gray-700 text-xl">Top Services</h2>
        <table class="table-auto w-full border border-gray-300 rounded-lg">
            <thead class="bg-gray-100">
                <tr>
                    <th class="text-left px-4 py-2 font-semibold">Service</th>
                    <th class="text-right px-4 py-2 font-semibold">Total Cost</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var svc in dashboard?.ServiceBreakdown ?? new())
                {
                    <tr class="hover:bg-blue-50 transition">
                        <td class="px-4 py-2">@svc.Service</td>
                        <td class="text-right px-4 py-2">@svc.TotalCost.ToString("C")</td>
                    </tr>
                }
            </tbody>
        </table>
    </CardContent>
</Card>

@code {
    DashboardSummary? dashboard;
    List<object> providerData = new();
    List<object> trendData = new();

    protected override async Task OnInitializedAsync()
    {
        var from = DateTime.UtcNow.AddDays(-30);
        var to = DateTime.UtcNow;
        dashboard = await CostService.GetDashboardAsync(from, to);

        if (dashboard != null)
        {
            providerData = dashboard.ProviderBreakdown
                .Select(p => new { name = p.Provider, value = p.TotalCost }).Cast<object>().ToList();

            trendData = dashboard.MonthlyTrends
                .Select(m => new { month = $"{m.Month}/{m.Year}", value = m.TotalCost }).Cast<object>().ToList();
        }
    }
}
